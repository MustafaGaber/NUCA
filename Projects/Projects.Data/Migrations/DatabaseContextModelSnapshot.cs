// <auto-generated />
using System;
using NUCA.Projects.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace NUCA.Projects.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("Invoices.Domain.Entities.Boqs.Boq", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Addition")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Boqs");
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Boqs.Item", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Index")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<double>("Quantity")
                        .HasColumnType("REAL");

                    b.Property<long?>("SectionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Unit")
                        .HasColumnType("TEXT");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Boqs.Section", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<long?>("TableId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Boqs.Table", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Addition")
                        .HasColumnType("REAL");

                    b.Property<long?>("BoqId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BoqId");

                    b.ToTable("Table");
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Companies.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Departments.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Departments.DepartmentGroup", b =>
                {
                    b.Property<long>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.HasKey("DepartmentId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("DepartmentGroup");
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Departments.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DGroup");
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Invoices.Invoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Addition")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Final")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<long>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Invoices.InvoiceItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<double>("CurrentQuantity")
                        .HasColumnType("REAL");

                    b.Property<string>("Index")
                        .HasColumnType("TEXT");

                    b.Property<long?>("InvoiceSectionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<double>("PreviousQuantity")
                        .HasColumnType("REAL");

                    b.Property<double>("Quantity")
                        .HasColumnType("REAL");

                    b.Property<string>("Unit")
                        .HasColumnType("TEXT");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("REAL");

                    b.Property<long?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceSectionId");

                    b.ToTable("InvoiceItem");
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Invoices.InvoiceItemPercentage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<long?>("InvoiceItemId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<double>("Percentage")
                        .HasColumnType("REAL");

                    b.Property<double>("Quantity")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceItemId");

                    b.ToTable("InvoiceItemPercentage");
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Invoices.InvoiceSection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<long?>("InvoiceTableId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceTableId");

                    b.ToTable("InvoiceSection");
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Invoices.InvoiceTable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Addition")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<long>("InvoiceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("InvoiceTables");

                    b.HasDiscriminator<int>("Type");
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Projects.ModifiedEndDate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ModifiedEndDate");
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Projects.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrderNumber")
                        .HasColumnType("INTEGER");

                    b.Property<double>("PrePaymentPercentage")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Users.UserDepartment", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("UserDepartment");
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Invoices.SuppliesTable", b =>
                {
                    b.HasBaseType("Invoices.Domain.Entities.Invoices.InvoiceTable");

                    b.HasIndex("InvoiceId");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Invoices.WorksTable", b =>
                {
                    b.HasBaseType("Invoices.Domain.Entities.Invoices.InvoiceTable");

                    b.HasIndex("InvoiceId");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Boqs.Boq", b =>
                {
                    b.HasOne("Invoices.Domain.Entities.Projects.Project", null)
                        .WithOne()
                        .HasForeignKey("Invoices.Domain.Entities.Boqs.Boq", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Boqs.Item", b =>
                {
                    b.HasOne("Invoices.Domain.Entities.Boqs.Section", null)
                        .WithMany("Items")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Boqs.Section", b =>
                {
                    b.HasOne("Invoices.Domain.Entities.Boqs.Table", null)
                        .WithMany("Sections")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Boqs.Table", b =>
                {
                    b.HasOne("Invoices.Domain.Entities.Boqs.Boq", null)
                        .WithMany("Tables")
                        .HasForeignKey("BoqId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Departments.DepartmentGroup", b =>
                {
                    b.HasOne("Invoices.Domain.Entities.Departments.Department", "Department")
                        .WithMany("Groups")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Invoices.Domain.Entities.Departments.Group", "Group")
                        .WithMany("Departments")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Invoices.Invoice", b =>
                {
                    b.HasOne("Invoices.Domain.Entities.Projects.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Invoices.InvoiceItem", b =>
                {
                    b.HasOne("Invoices.Domain.Entities.Invoices.InvoiceSection", null)
                        .WithMany("Items")
                        .HasForeignKey("InvoiceSectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Invoices.InvoiceItemPercentage", b =>
                {
                    b.HasOne("Invoices.Domain.Entities.Invoices.InvoiceItem", null)
                        .WithMany("Percentages")
                        .HasForeignKey("InvoiceItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Invoices.InvoiceSection", b =>
                {
                    b.HasOne("Invoices.Domain.Entities.Invoices.InvoiceTable", null)
                        .WithMany("Sections")
                        .HasForeignKey("InvoiceTableId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Projects.ModifiedEndDate", b =>
                {
                    b.HasOne("Invoices.Domain.Entities.Projects.Project", null)
                        .WithMany("ModifiedEndDates")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Projects.Project", b =>
                {
                    b.HasOne("Invoices.Domain.Entities.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Invoices.Domain.Entities.Departments.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Company");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Users.UserDepartment", b =>
                {
                    b.HasOne("Invoices.Domain.Entities.Departments.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Invoices.Domain.Entities.Users.User", "User")
                        .WithMany("Departments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Invoices.SuppliesTable", b =>
                {
                    b.HasOne("Invoices.Domain.Entities.Invoices.Invoice", null)
                        .WithMany("SuppliesTables")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Invoices.WorksTable", b =>
                {
                    b.HasOne("Invoices.Domain.Entities.Invoices.Invoice", null)
                        .WithMany("WorksTables")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Boqs.Boq", b =>
                {
                    b.Navigation("Tables");
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Boqs.Section", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Boqs.Table", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Departments.Department", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Departments.Group", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Invoices.Invoice", b =>
                {
                    b.Navigation("SuppliesTables");

                    b.Navigation("WorksTables");
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Invoices.InvoiceItem", b =>
                {
                    b.Navigation("Percentages");
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Invoices.InvoiceSection", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Invoices.InvoiceTable", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Projects.Project", b =>
                {
                    b.Navigation("ModifiedEndDates");
                });

            modelBuilder.Entity("Invoices.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("Departments");
                });
#pragma warning restore 612, 618
        }
    }
}
